using panther

class Diagnostic(location: TextLocation, message: string) {
    def toString(): string = location.to_string() + ": " + message
}

enum Diagnostics {
  case Empty
  case Cons(head: Diagnostic, tail: Diagnostics)
}

class DiagnosticBag() {
  var count: int = 0
  var diagnostics: Diagnostics = Diagnostics.Empty

  def report(location: TextLocation, message: string): unit = add(new Diagnostic(location, message))

  def reportTypeNotDefined(location: TextLocation, name: string): unit = report(location, "Type " + name + " not defined")

  def reportBadCharacter(location: TextLocation, value: char): unit = report(location, "Invalid character in input: " + string(value))

  def reportEmptyCharLiteral(location: TextLocation): unit = report(location, "Empty character literal")

  def reportUnterminatedBlockComment(location: TextLocation): unit = report(location, "Unterminated block comment")

  def reportUnterminatedChar(location: TextLocation): unit = report(location, "Unterminated character literal")

  def reportUnterminatedString(location: TextLocation): unit = report(location, "Unterminated string literal")

  def reportExpectedExpression(location: TextLocation, currentKind: int): unit =
    report(location, "Unexpected token " + SyntaxFacts.getKindName(currentKind) + ", expected expression")

  def reportUnexpectedToken(location: TextLocation, currentKind: int, expectedKind: int): unit =
    report(location, "Unexpected token " + SyntaxFacts.getKindName(currentKind) + ", expected " + SyntaxFacts.getKindName(expectedKind))

  def reportInvalidEscapeSequence(location: TextLocation, current: char): unit =
    report(location, "Invalid character in escape sequence: " + string(current))

  def reportExpectedPattern(location: TextLocation, currentKind: int): unit =
    report(location, "Unexpected token " + SyntaxFacts.getKindName(currentKind) + ", expected pattern")

  def add(diagnostic: Diagnostic): unit = {
    count = count + 1
    diagnostics = Diagnostics.Cons(diagnostic, diagnostics)
  }
  
  def addDiagnostics(more: Diagnostics): unit = {
    more match {
      case Diagnostics.Empty => ()
      case Diagnostics.Cons(head, tail) =>
        add(head)
        addDiagnostics(tail)
    }
  }
}
