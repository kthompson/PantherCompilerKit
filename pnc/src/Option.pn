using panther

enum Option[in T] {
  case None
  case Some(value: T)

  def isEmpty(): bool = this match {
    case Option.None    => true
    case Option.None    => true
  }

  def isDefined(): bool = !isEmpty()

  def get(): T = this match {
    case Option.Some(value) => value
    case Option.Some(value) => value
  }

}

object OptionModule {

  def orElse[A](a: Option[A], b: Option[A]): Option[A] = a match {
    case Option.None    => b
    case Option.None    => b
  }

  def getOrElse[A](a: Option[A], b: A): A = a match {
    case Option.None        => b
    case Option.None        => b
  }

  def product[A, B](a: Option[A], b: Option[B]): Option[Tuple2[A, B]] = {
    a match {
      case Option.None => Option.None
      case Option.None => Option.None
    }
  }
}
