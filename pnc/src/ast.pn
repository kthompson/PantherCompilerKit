using panther

using MemberSyntax
using SimpleNameSyntax

/**
    separatorToken may be either a `.` or `,` in the case
*/

class TypeAnnotationSyntax(colonToken: SyntaxToken, typ: NameSyntax)

class ArrayInitializerExpressionSyntax(
    openBrace: SyntaxToken,
    expressions: ExpressionListSyntax,
    closeBrace: SyntaxToken
)

enum SimpleNameSyntax {
    case GenericNameSyntax(identifier: SyntaxToken,
                           typeArgumentlist: TypeArgumentListSyntax)
    case IdentifierNameSyntax(identifier: SyntaxToken)

    case ScalaAliasSyntax(open: SyntaxToken, name: SyntaxToken, arrow: SyntaxToken, alias: SyntaxToken, close: SyntaxToken)
    case AliasSyntax(name: SyntaxToken, asKeyword: SyntaxToken, alias: SyntaxToken)
}
enum NameSyntax {
    case QualifiedNameSyntax(left: NameSyntax, dotToken: SyntaxToken, right: SimpleNameSyntax)
    case SimpleName(name: SimpleNameSyntax)
}
class ExpressionItemSyntax(expression: Expression, separatorToken: Option<SyntaxToken>)
class ExpressionListSyntax(expressions: Array<ExpressionItemSyntax>)

class BlockExpressionListSyntax(
                                      statements: Array<StatementSyntax>,
                                      expression: Option<Expression>)


enum Expression {
    case ArrayCreationExpression(newKeyword: SyntaxToken,
                                 name: NameSyntax,
                                 openBracket: SyntaxToken,
                                 arrayRank: Option<Expression>,
                                 closeBracket: SyntaxToken,
                                 initializer: Option<ArrayInitializerExpressionSyntax>)
    case AssignmentExpression(
                               left: Expression,
                               equals: SyntaxToken,
                               right: Expression)
    case BinaryExpression(left: Expression, operator: SyntaxToken, right: Expression)
    case BlockExpression(
                          openBrace: SyntaxToken,
                          block: BlockExpressionListSyntax,
                          closeBrace: SyntaxToken)
    case CallExpression(
                         name: Expression,
                         openParen: SyntaxToken,
                         arguments: ExpressionListSyntax,
                         closeParen: SyntaxToken)
    case ForExpression(
                        forKeyword: SyntaxToken,
                        openParen: SyntaxToken,
                        identifier: SyntaxToken,
                        arrow: SyntaxToken,
                        fromExpr: Expression,
                        toKeyword: SyntaxToken,
                        toExpr: Expression,
                        closeParen: SyntaxToken,
                        body: Expression)
    case GroupExpression(
                          openParen: SyntaxToken,
                          expression: Expression,
                          closeParen: SyntaxToken)
    case IdentifierName(value: SimpleNameSyntax.IdentifierNameSyntax)
    case IfExpression(
                       ifKeyword: SyntaxToken,
                       openParen: SyntaxToken,
                       condition: Expression,
                       closeParen: SyntaxToken,
                       thenExpr: Expression,
                       elseKeyword: SyntaxToken,
                       elseExpr: Expression)
    case IndexExpression(
                          left: Expression,
                          openBracket: SyntaxToken,
                          index: Expression,
                          closeBracket: SyntaxToken)
    case LiteralExpression(token: SyntaxToken, value: SyntaxTokenValue)
    case MemberAccessExpression(
                                 left: Expression,
                                 dotToken: SyntaxToken,
                                 right: SimpleNameSyntax.IdentifierNameSyntax)
    case MatchExpression(expression: Expression, matchKeyword: SyntaxToken, openBrace: SyntaxToken, cases : Array<MatchCaseSyntax>, closeBrace: SyntaxToken)
    case NewExpression(
                        newKeyword: SyntaxToken,
                        name: NameSyntax,
                        openParen: SyntaxToken,
                        arguments: ExpressionListSyntax,
                        closeParen: SyntaxToken)
    case UnaryExpression(operator: SyntaxToken, expression: Expression)
    case UnitExpression(openParen: SyntaxToken, closeParen: SyntaxToken)
    case WhileExpression(whileKeyword: SyntaxToken,
                         openParen: SyntaxToken,
                         condition: Expression,
                         closeParen: SyntaxToken,
                         body: Expression)
}

class MatchCaseSyntax(
    caseKeyword: SyntaxToken,
    pattern: PatternSyntax,
    arrow: SyntaxToken,
    block: BlockExpressionListSyntax
)

enum PatternSyntax {
    case ExtractPattern(value: NameSyntax, openParenToken: SyntaxToken, patterns: Array<PatternItemSyntax>, closeParenToken: SyntaxToken)
    case IdentifierPattern(value: SyntaxToken, typeAnnotation: TypeAnnotationSyntax)
    case TypePattern(typ: NameSyntax)
    case LiteralPattern(value: SyntaxToken)
    case DiscardPattern(value: SyntaxToken)
}

class PatternItemSyntax(pattern: PatternSyntax, separatorToken: Option<SyntaxToken>)

class FunctionBodySyntax(equalToken: SyntaxToken, expression: Expression)
class ParameterSyntax(
    modifier: Option<SyntaxToken>,
    identifier: SyntaxToken,
    typeAnnotation: TypeAnnotationSyntax,
    commaToken: Option<SyntaxToken>
)

class TypeArgumentItemSyntax(name: NameSyntax, separator: Option<SyntaxToken>)

class TypeArgumentListSyntax(
    lessThanToken: SyntaxToken,
    arguments: Array<TypeArgumentItemSyntax>,
    greaterThanToken: SyntaxToken
)

class UsingDirectiveSyntax(usingKeyword: SyntaxToken, name: NameSyntax)

class TemplateSyntax(
    openBrace: SyntaxToken,
    members: Array<MemberSyntax>,
    closeBrace: SyntaxToken
)

enum StatementSyntax {
    case VariableDeclarationStatement(
                                       valOrVarKeyword: SyntaxToken,
                                       identifier: SyntaxToken,
                                       typeAnnotation: Option<TypeAnnotationSyntax>,
                                       equalToken: SyntaxToken,
                                       expression: Expression)
    case BreakStatement(breakKeyword: SyntaxToken)
    case ContinueStatement(continueKeyword: SyntaxToken)
    case ExpressionStatement(expression: Expression)
}

class EnumCaseParametersSyntax(openParenToken: SyntaxToken, parameters: Array<ParameterSyntax>, closeParenToken: SyntaxToken)
class EnumCaseSyntax(caseKeyword: SyntaxToken, identifier: SyntaxToken, parameters: Option<EnumCaseParametersSyntax>)

enum MemberSyntax {
    case ObjectDeclarationSyntax(objectKeyword: SyntaxToken,
                                 identifier: SyntaxToken,
                                 template: TemplateSyntax)
    case ClassDeclarationSyntax(caseKeyword: Option<SyntaxToken>,
                                classKeyword: SyntaxToken,
                                identifier: SyntaxToken,
                                openParenToken: SyntaxToken,
                                parameters: Array<ParameterSyntax>,
                                closeParenToken: SyntaxToken,
                                template: Option<TemplateSyntax>)
    case FunctionDeclarationSyntax(defKeyword: SyntaxToken,
                                   identifier: SyntaxToken,
                                   openParenToken: SyntaxToken,
                                   parameters: Array<ParameterSyntax>,
                                   closeParenToken: SyntaxToken,
                                   typeAnnotation: Option<TypeAnnotationSyntax>,
                                   body: Option<FunctionBodySyntax>)
    case GlobalStatementSyntax(statement: StatementSyntax)
    case EnumDeclarationSyntax(enumKeyword: SyntaxToken,
                               identifier: SyntaxToken,
                               openBraceToken: SyntaxToken,
                               cases: Array<EnumCaseSyntax>,
                               members: Array<MemberSyntax>,
                               closeBraceToken: SyntaxToken)
}

/**
  * names [1..n]
  */
class NamespaceDeclarationSyntax(namespaceKeyword: SyntaxToken, name: NameSyntax)


/**
    namespaceDeclaration [0..1]
    usings [0..n]
    members [0..n]
*/
class CompilationUnitSyntax(namespaceDeclaration: Option<NamespaceDeclarationSyntax>, usings: Array<UsingDirectiveSyntax>, members: Array<MemberSyntax>, endToken: SyntaxToken) {
    val kind: int = SyntaxKind.CompilationUnit
}


object DeclarationKind {
    val Member = 1
    val Parameter = 2
    val Local = 3
    val Token = 4
    val Builtin = 5
}

// A declaration is any syntax that defines a binding, the type of the
// symbol will not always match the declarations.
// For example, a constructor symbol will usually have a Class declaration
// and field symbols can either be Local declarations or Parameter declarations

enum Declaration {
    case Class(name: string, location: TextLocation, value: MemberSyntax.ClassDeclarationSyntax)
    case ClassFromObject(name: string, location: TextLocation, value: MemberSyntax.ObjectDeclarationSyntax)
    case ClassFromEnum(name: string, location: TextLocation, value: MemberSyntax.EnumDeclarationSyntax)
    case ClassFromEnumCase(name: string, location: TextLocation, value: EnumCaseSyntax)

    case Constructor(name: string, location: TextLocation, value: Array<ParameterSyntax>)

    case Method(name: string, location: TextLocation, value: MemberSyntax.FunctionDeclarationSyntax)

    case FieldFromParameter(name: string, location: TextLocation, value: ParameterSyntax)
    case FieldFromVariable(name: string, location: TextLocation, value: StatementSyntax.VariableDeclarationStatement)

    case Parameter(name: string, location: TextLocation, value: ParameterSyntax)
    case Local(name: string, location: TextLocation, value: StatementSyntax.VariableDeclarationStatement)
}
