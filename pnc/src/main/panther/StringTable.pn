using panther

class StringTable() {
  var strings = new Array<string>(0)
  var capacity = 0
  var size = 0

  def ensureSpace(n: int): unit = {
    if (size + n > capacity) {
      var newCapacity = if (capacity == 0) 16 else capacity * 2
      while (size + n > newCapacity) {
        newCapacity = newCapacity * 2
      }
      val newStrings = new Array<string>(newCapacity)
      for (i <- 0 to (size - 1)) {
        newStrings(i) = strings(i)
      }

      strings = newStrings
      capacity = newCapacity
    } else ()
  }

  def addBlob(value: string): StringToken = {
    // ensure strings capacity
    ensureSpace(1)

    // add string to strings
    strings(size) = value
    size = size + 1
    StringToken(size - 1)
  }

  def get(token: StringToken): string = strings(token.token)
}
