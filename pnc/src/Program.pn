using panther

object Program {
  def main(args: Array[string]): unit = {
    print("pncs")
    for (i <- 0 to (args.length - 1)) {
      print(" " + args(i))
    }
    println()

    if (args.length < 2) {
      printHelp()
    } else if (args(0) == "-t") {
      run(true, args)
    } else {
      run(false, args)
    }
  }

  def hasDiagnostics(trees: List[SyntaxTree]): bool = {
    trees match {
      case List.Nil => false
      case List.Cons(head, tail) =>
        head.diagnostics match {
          case Diagnostics.Empty => hasDiagnostics(tail)
          case _                 => true
        }
    }
  }

  def run(transpile: bool, args: Array[string]): unit = {
    val firstFile = if (transpile) 2 else 1
    val numTrees = args.length - firstFile
    val outputFile = args(firstFile - 1)
    printLogo()
    var trees: List[SyntaxTree] = List.Nil
    for (x <- firstFile to (args.length - 1)) {
      print("parsing " + args(x) + "...")
      trees = List.Cons(MakeSyntaxTree.parseFile(args(x)), trees)
      println("done")
    }

    // verify no diagnostics from parse trees
    if (hasDiagnostics(trees)) {
      var parseErrors = 0
      while (trees != List.Nil) {
        trees match {
          case List.Nil => ()
          case List.Cons(head, tail) =>
            parseErrors = head.diagnostics._printDiagnostics(parseErrors)
            trees = tail
        }
      }
      println("found " + string(parseErrors) + " diagnostics")
    } else if (transpile) {
      val transpiler = new Transpiler(trees, outputFile)
      transpiler.transpile()
    } else {
      val compilation = MakeCompilation.create(trees)
      compilation.diagnostics match {
        case Diagnostics.Empty =>
          compilation.printSymbols()
          println("emitting to " + outputFile + "...")
          compilation.emit(outputFile)

        case diags =>
          compilation.printSymbols()
          val count = diags.printDiagnostics()
          println("found " + count + " diagnostics")
      }
    }
  }

  def printToken(token: SyntaxToken): unit =
    println(
      Pad.right(
        "TOKEN[" + SyntaxFacts.getKindName(token.kind) + "," + string(
          token.start
        ) + "]: ",
        36,
        ' '
      ) + "\"" + token.text + "\""
    )

  def printLogo(): unit = println("panther compiler - 0.0.1")

  def printHelp(): unit = {
    println("pncs output.c [sources]")
    println("pncs -t output/ [sources]")
  }
}
