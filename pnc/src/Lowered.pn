using BoundExpression.Block
using LoweredStatement.ExpressionStatement
using panther

class LoweredAssembly(
    functionBodies: Dictionary[Symbol, LoweredBlock],
    entryPoint: Option[Symbol]
)

class Label(name: String)
class LabelToken(id: int)

enum LoweredStatement {
  case Error
  case AssignStaticField(
      location: TextLocation,
      field: Symbol,
      expression: LoweredExpression
  )
  case AssignField(
      location: TextLocation,
      receiver: LoweredLeftHandSide,
      field: Symbol,
      expression: LoweredExpression
  )
  case AssignLocal(
      location: TextLocation,
      local: Symbol,
      expression: LoweredExpression
  )
  case AssignArrayElement(
      location: TextLocation,
      array: LoweredExpression,
      index: LoweredExpression,
      value: LoweredExpression
  )
  case ConditionalGoto(
      location: TextLocation,
      label: Label,
      condition: LoweredExpression,
      invert: Boolean
  )

  // is this needed?
  case ExpressionStatement(
      location: TextLocation,
      expression: LoweredExpression
  )
  case Goto(location: TextLocation, label: Label)
  case LabelDeclaration(location: TextLocation, label: Label)
  case Return(location: TextLocation, expression: LoweredExpression)
//  case VariableDeclaration(
//      location: TextLocation,
//      variable: Symbol,
//      isReadOnly: Boolean,
//      typ: Type
//  )
}

class LoweredLeftHandSideBlock(
    statements: Chain[LoweredStatement],
    expression: LoweredLeftHandSide
)

enum LoweredLeftHandSide {
  case Variable(location: TextLocation, symbol: Symbol)
  case MemberAccess(
      location: TextLocation,
      left: LoweredLeftHandSide,
      symbol: Symbol
  )
  case New(
      location: TextLocation,
      constructor: Symbol,
      genericArguments: List[Type],
      arguments: Chain[LoweredExpression]
  )
//  case Index(
//      location: TextLocation,
//      left: LoweredLeftHandSide,
//      index: LoweredExpression
//  )

  def getLocation(): TextLocation = {
    this match {
      case expr: LoweredLeftHandSide.Variable     => expr.symbol.location
      case expr: LoweredLeftHandSide.Variable     => expr.symbol.location
      case expr: LoweredLeftHandSide.MemberAccess => expr.location
//      case expr: LoweredLeftHandSide.Index        => expr.location
    }
  }
}

enum LoweredExpression {
  case Error
  case ArrayAccess(
      location: TextLocation,
      array: LoweredExpression,
      index: LoweredExpression,
      resultType: Type
  )
  case ArrayCreation(
      location: TextLocation,
      elementType: Type,
      sizeExpression: LoweredExpression,
      resultType: Type
  )
  case BinaryExpression(
      location: TextLocation,
      left: LoweredExpression,
      operator: BinaryOperatorKind,
      right: LoweredExpression,
      resultType: Type
  )
  case Boolean(location: TextLocation, value: bool)
  case Cast(
      location: TextLocation,
      operand: LoweredExpression,
      resultType: Type
  )
  case Call(
      location: TextLocation,
      receiver: Option[LoweredLeftHandSide],
      method: Symbol,
      genericArguments: List[Type],
      arguments: Chain[LoweredExpression],
      resultType: Type
  )
  case Character(location: TextLocation, value: char)
  case Integer(location: TextLocation, value: int)
  case MemberAccess(
      location: TextLocation,
      left: LoweredLeftHandSide,
      symbol: Symbol
  )
  case New(
      location: TextLocation,
      constructor: Symbol,
      genericArguments: List[Type],
      arguments: Chain[LoweredExpression]
  )
  case String(location: TextLocation, value: string)
  case This(location: TextLocation)
  case TypeCheck(
      location: TextLocation,
      expression: LoweredExpression,
      expectedType: Type
  )
  case Unary(
      location: TextLocation,
      operand: LoweredExpression,
      operator: UnaryOperatorKind,
      resultType: Type
  )
  case Unit
  case Variable(location: TextLocation, symbol: Symbol)

  def getLocation(): TextLocation = {
    this match {
      case LoweredExpression.Error               => TextLocationFactory.empty()
      case LoweredExpression.Error               => TextLocationFactory.empty()
      case expr: LoweredExpression.ArrayAccess   => expr.location
      case expr: LoweredExpression.ArrayCreation => expr.location
      case expr: LoweredExpression.BinaryExpression => expr.location
      case expr: LoweredExpression.Boolean          => expr.location
      case expr: LoweredExpression.Call             => expr.location
      case expr: LoweredExpression.Cast             => expr.location
      case expr: LoweredExpression.Character        => expr.location
      case expr: LoweredExpression.Integer          => expr.location
      case expr: LoweredExpression.MemberAccess     => expr.location
      case expr: LoweredExpression.New              => expr.location
      case expr: LoweredExpression.Variable         => expr.location
      case expr: LoweredExpression.String           => expr.location
      case expr: LoweredExpression.This             => expr.location
      case expr: LoweredExpression.TypeCheck        => expr.location
      case expr: LoweredExpression.Unary            => expr.location
    }
  }
}

class LoweredBlock(
    statements: Chain[LoweredStatement],
    expression: LoweredExpression
)

object Lower {
  def lower(boundAssembly: BoundAssembly, binder: Binder): LoweredAssembly = {
    val diagnostics = boundAssembly.diagnostics

    val entryPoint = boundAssembly.entryPoint

    val functionBodies = lowerFunctionBodies(
      boundAssembly.functionBodies,
      DictionaryModule.empty[Symbol, LoweredBlock](),
      binder
    )

    LoweredAssembly(functionBodies, entryPoint)
  }

  def lowerFunctionBodies(
      bodies: Dictionary[Symbol, BoundExpression],
      lowered: Dictionary[Symbol, LoweredBlock],
      binder: Binder
  ): Dictionary[Symbol, LoweredBlock] = {
    bodies.list match {
      case List.Nil => lowered
      case List.Nil => lowered
    }
  }

  def lowerFunctionBody(
      symbol: Symbol,
      body: BoundExpression,
      binder: Binder
  ): LoweredBlock = {
    val context = LoweredBlock(Chain.Empty(), LoweredExpression.Unit)
    val lowerer = new ExpressionLowerer(symbol, binder)
    val block = lowerer.lowerExpression(body, context)
    filterUnitStatements(block)
  }

  def filterUnitStatements(block: LoweredBlock): LoweredBlock = {
    val statements =
      ChainModule.fromList(filterUnitStatementsChain(block.statements).toList())
    LoweredBlock(statements, block.expression)
  }

  def filterUnitStatementsChain(
      block: Chain[LoweredStatement]
  ): Chain[LoweredStatement] = {
    block.uncons() match {
      case Option.None => Chain.Empty[LoweredStatement]()
      case Option.None => Chain.Empty[LoweredStatement]()
    }
  }

}

class ExpressionLowerer(symbol: Symbol, binder: Binder) {

  var _labelCount = 0
  var _variableCount = 0
  val emptyBlock: LoweredBlock =
    LoweredBlock(Chain.Empty(), LoweredExpression.Unit)

  def getLabelToken(): LabelToken = {
    _labelCount = _labelCount + 1
    LabelToken(_labelCount)
  }

  def getLabel(token: LabelToken, tag: string): Label = {
    val suffix = if (tag == "") "" else "_" + tag
    Label("$" + string(token.id) + suffix)
  }

  def createTemporary(): Symbol = {
    _variableCount = _variableCount + 1
    symbol.defineLocal(
      "$" + string(_variableCount),
      TextLocationFactory.empty()
    )
  }

  def lowerExpression(
      expression: BoundExpression,
      context: LoweredBlock
  ): LoweredBlock = {
    expression match {
      case BoundExpression.Error(message) => panic(message)
      case BoundExpression.Error(message) => panic(message)
      case expr: BoundExpression.ArrayCreation =>
        lowerArrayCreation(expr, context)
      case expr: BoundExpression.Assignment => lowerAssignment(expr, context)
      case expr: BoundExpression.BinaryExpression =>
        lowerBinaryExpression(expr, context)
      case expr: BoundExpression.Block => lowerBlock(expr, context)
      case expr: BoundExpression.Boolean =>
        lowerBooleanLiteral(expr, context)
      case expr: BoundExpression.CallExpression =>
        lowerCallExpression(expr, context)
      case expr: BoundExpression.CastExpression =>
        lowerCastExpression(expr, context)
      case expr: BoundExpression.Character =>
        lowerCharacterLiteral(expr, context)
      case expr: BoundExpression.ForExpression =>
        lowerForExpression(expr, context)
      case expr: BoundExpression.IfExpression =>
        lowerIfExpression(expr, context)
      case expr: BoundExpression.IndexExpression =>
        lowerIndexExpression(expr, context)
      case expr: BoundExpression.Int => lowerIntLiteral(expr, context)
      case expr: BoundExpression.IsExpression =>
        lowerIsExpression(expr, context)
      case expr: BoundExpression.MemberAccess =>
        lhsBlockToBlock(lowerMemberAccess(expr, context))
      case expr: BoundExpression.NewExpression =>
        lhsBlockToBlock(lowerNewExpression(expr, context))
      case expr: BoundExpression.String =>
        lowerStringLiteral(expr, context)
      case expr: BoundExpression.UnaryExpression =>
        lowerUnaryExpression(expr, context)
      case expr: BoundExpression.UnitExpression =>
        lowerUnitExpression(expr, context)
      case expr: BoundExpression.Variable =>
        lhsBlockToBlock(lowerVariable(expr.location, expr.symbol, context))
      case expr: BoundExpression.WhileExpression =>
        lowerWhileExpression(expr, context)
    }
  }

  def lhsBlockToBlock(lhs: LoweredLeftHandSideBlock) = {
    LoweredBlock(
      lhs.statements,
      lhsToExpression(lhs.expression)
    )
  }

  def lhsToExpression(expression: LoweredLeftHandSide) = {
    expression match {
      case LoweredLeftHandSide.Variable(location, symbol) =>
        // we have a variable so we can just return it
        LoweredExpression.Variable(location, symbol)
      case LoweredLeftHandSide.Variable(location, symbol) =>
        // we have a variable so we can just return it
        LoweredExpression.Variable(location, symbol)
      case LoweredLeftHandSide.MemberAccess(location, left, symbol) =>
        LoweredExpression.MemberAccess(location, left, symbol)
    }
  }

  def lowerArrayCreation(
      expr: BoundExpression.ArrayCreation,
      context: LoweredBlock
  ): LoweredBlock = {
    // Lower the size expression first
    val sizeBlock = lowerExpression(expr.sizeExpression, context)

    // Create a lowered array creation expression
    val arrayCreation = LoweredExpression.ArrayCreation(
      expr.location,
      expr.elementType,
      sizeBlock.expression,
      expr.resultType
    )

    LoweredBlock(sizeBlock.statements, arrayCreation)
  }

  def lowerAssignment(
      expr: BoundExpression.Assignment,
      context: LoweredBlock
  ): LoweredBlock = {
    val block = lowerExpression(expr.expression, context)

    expr.receiver match {
      case BoundLeftHandSide.ArrayCreation(expression) => ???
      case BoundLeftHandSide.ArrayCreation(expression) => ???
      case BoundLeftHandSide.Call(expression)          => ???
      case BoundLeftHandSide.Index(expression) =>
        lowerIndexAssignment(expression, block)
      case BoundLeftHandSide.MemberAccess(expression) => ???
      case BoundLeftHandSide.New(expression)          => ???
    }
  }

  def lowerIndexAssignment(
      indexExpr: BoundExpression.IndexExpression,
      valueBlock: LoweredBlock
  ): LoweredBlock = {
    // Lower the array expression first
    val arrayBlock = lowerExpression(indexExpr.array, valueBlock)

    // Lower the index expression
    consumeExpr(arrayBlock) match {
      case Tuple2(arrayLowered, arrayStatements) =>
        val indexBlock = lowerExpression(indexExpr.index, arrayStatements)

        // Generate array assignment statement
        LoweredBlock(
          indexBlock.statements.append(
            LoweredStatement.AssignArrayElement(
              indexExpr.location,
              arrayLowered,
              indexBlock.expression,
              valueBlock.expression
            )
          ),
          LoweredExpression.Unit
        )
    }
  }

  def lowerFieldAssignment(
      symbol: Symbol,
      block: LoweredBlock
  ): LoweredBlock = {
    // there are two cases here:
    // - field is static and there is no receiver
    // - field is not static but also no receiver was specified, so we assume it is a field assignment on the current instance

    if (symbol.isStatic()) {
      LoweredBlock(
        block.statements.append(
          LoweredStatement.AssignStaticField(
            symbol.location,
            symbol,
            block.expression
          )
        ),
        LoweredExpression.Unit
      )
    } else {
      // For non-static fields without an explicit receiver,
      // treat it as a field assignment on the current instance (this)
      // First create a temporary variable for the 'this' reference to use as LHS
      val temp = createTemporary()
      val thisAssignment = LoweredStatement.AssignLocal(
        symbol.location,
        temp,
        LoweredExpression.This(symbol.location)
      )
      val fieldAssignment = LoweredStatement.AssignField(
        symbol.location,
        LoweredLeftHandSide.Variable(symbol.location, temp),
        symbol,
        block.expression
      )
      LoweredBlock(
        block.statements.append(thisAssignment).append(fieldAssignment),
        LoweredExpression.Unit
      )
    }
//
//    // we have a field assignment, so we need to lower it to an AssignField statement
//    val lowered = LoweredStatement.AssignField(
//      symbol.location,
//      LoweredLeftHandSide.Variable(symbol),
//      symbol,
//      block.expression
//    )
//
//    LoweredBlock(block.statements.append(lowered), LoweredExpression.Unit)
  }

  def lowerBinaryExpression(
      expr: BoundExpression.BinaryExpression,
      context: LoweredBlock
  ): LoweredBlock = {
    consumeExpr(
      lowerExpression(expr.left, context)
    ) match {
      case Tuple2(left, leftBlock) =>
        val right = lowerExpression(expr.right, leftBlock)

        val binary = LoweredExpression.BinaryExpression(
          expr.location,
          left,
          expr.operator,
          right.expression,
          expr.resultType
        )

        LoweredBlock(right.statements, binary)
    }
  }

  def lowerBlock(
      expr: BoundExpression.Block,
      context: LoweredBlock
  ): LoweredBlock = {
    val block = lowerStatements(expr.statements, context)
    lowerExpression(expr.expression, block)
  }

  def lowerBooleanLiteral(
      expr: BoundExpression.Boolean,
      context: LoweredBlock
  ): LoweredBlock = {
    val lowered = LoweredExpression.Boolean(
      expr.location,
      expr.value
    )

    checkUnusedExpr(context)

    LoweredBlock(context.statements, lowered)
  }

  def lowerCallExpression(
      expr: BoundExpression.CallExpression,
      context: LoweredBlock
  ): LoweredBlock = {
    checkUnusedExpr(context)
    lowerCallExpressionArguments(
      expr,
      expr.arguments,
      Chain.Empty(),
      context.statements
    )
  }

  def lowerCallExpressionArguments(
      call: BoundExpression.CallExpression,
      arguments: List[BoundExpression],
      loweredArguments: Chain[LoweredExpression],
      statements: Chain[LoweredStatement]
  ): LoweredBlock = {
    arguments match {
      case List.Nil =>
        // return the call
        call.receiver match {
          case Option.None =>
            LoweredBlock(
              statements,
              LoweredExpression.Call(
                call.location,
                Option.None,
                call.method,
                call.genericArguments,
                loweredArguments,
                call.resultType
              )
            )
          case Option.None =>
            LoweredBlock(
              statements,
              LoweredExpression.Call(
                call.location,
                Option.None,
                call.method,
                call.genericArguments,
                loweredArguments,
                call.resultType
              )
            )
        }

      case List.Nil =>
        // return the call
        call.receiver match {
          case Option.None =>
            LoweredBlock(
              statements,
              LoweredExpression.Call(
                call.location,
                Option.None,
                call.method,
                call.genericArguments,
                loweredArguments,
                call.resultType
              )
            )
          case Option.None =>
            LoweredBlock(
              statements,
              LoweredExpression.Call(
                call.location,
                Option.None,
                call.method,
                call.genericArguments,
                loweredArguments,
                call.resultType
              )
            )
        }

    }
  }

  def lowerCastExpression(
      expr: BoundExpression.CastExpression,
      context: LoweredBlock
  ): LoweredBlock = {

    val block = lowerExpression(expr.expression, context)

    // TODO: probably should improve this more so we know the exact cast from and to
    val casted = LoweredExpression.Cast(
      expr.location,
      block.expression,
      expr.targetType
    )

    LoweredBlock(block.statements, casted)
  }

  def lowerIsExpression(
      expr: BoundExpression.IsExpression,
      context: LoweredBlock
  ): LoweredBlock = {

    val block = lowerExpression(expr.expression, context)

    val typeCheck = LoweredExpression.TypeCheck(
      expr.location,
      block.expression,
      expr.targetType
    )

    LoweredBlock(block.statements, typeCheck)
  }

  def lowerCharacterLiteral(
      expr: BoundExpression.Character,
      context: LoweredBlock
  ): LoweredBlock = {
    val lowered = LoweredExpression.Character(
      expr.location,
      expr.value
    )

    checkUnusedExpr(context)

    LoweredBlock(context.statements, lowered)
  }

  def lowerForExpression(
      expr: BoundExpression.ForExpression,
      context: LoweredBlock
  ): LoweredBlock = ???

  def lowerIfExpression(
      expr: BoundExpression.IfExpression,
      context: LoweredBlock
  ): LoweredBlock = {

    /*
     * if (<condition>)
     *     <thenBody>
     * else
     *     <elseBody>
     *
     * to
     *
     * var x
     * gotoIf <condition> <thenLabel>
     *    x = <elseBody>
     *    goto <endLabel>
     * <thenLabel>
     *    x = <thenBody>
     * <endLabel>
     *
     */

    checkUnusedExpr(context)

    val conditionBlock = lowerExpression(expr.cond, context)

    val token = getLabelToken()
    val thenLabel = getLabel(token, "then")
    val endLabel = getLabel(token, "end")

    val condGoto = conditionBlock.statements.append(
      LoweredStatement.ConditionalGoto(
        expr.location,
        thenLabel,
        conditionBlock.expression,
        false
      )
    )
    val gotoEnd = LoweredStatement.Goto(expr.location, endLabel)
    val thenLabelDecl = LoweredStatement.LabelDeclaration(
      expr.location,
      thenLabel
    )

    val endLabelDecl = LoweredStatement.LabelDeclaration(
      expr.location,
      endLabel
    )

    val thenBlock = lowerExpression(expr.thenExpr, emptyBlock)
    expr.elseExpr match {
      case Option.Some(elseExpr) =>
        val elseBlock = lowerExpression(elseExpr, emptyBlock)

        /* converted structure looks like the following:
         *
         * var x
         * gotoIf <condition> <thenLabel>
         *   x = <elseBody>
         * goto <endLabel>
         * <thenLabel>
         *   x = <thenBody>
         * <endLabel>
         */

        val variable = createTemporary()

//        val variableDeclaration = LoweredStatement.VariableDeclaration(
//          expr.location,
//          variable,
//          false,
//          expr.resultType
//        )

        LoweredBlock(
//          ChainModule
//            .of(variableDeclaration)
//            .concat(condGoto)
          condGoto
            .concat(
              blockToAssignment(
                AstUtils.locationOfBoundExpression(elseExpr),
                variable,
                elseBlock
              )
            )
            .append(gotoEnd)
            .append(thenLabelDecl)
            .concat(
              blockToAssignment(
                AstUtils.locationOfBoundExpression(expr.thenExpr),
                variable,
                thenBlock
              )
            )
            .append(endLabelDecl),
          // return the variable we created
          LoweredExpression.Variable(expr.location, variable)
        )

      case Option.Some(elseExpr) =>
        val elseBlock = lowerExpression(elseExpr, emptyBlock)

        /* converted structure looks like the following:
         *
         * var x
         * gotoIf <condition> <thenLabel>
         *   x = <elseBody>
         * goto <endLabel>
         * <thenLabel>
         *   x = <thenBody>
         * <endLabel>
         */

        val variable = createTemporary()

//        val variableDeclaration = LoweredStatement.VariableDeclaration(
//          expr.location,
//          variable,
//          false,
//          expr.resultType
//        )

        LoweredBlock(
//          ChainModule
//            .of(variableDeclaration)
//            .concat(condGoto)
          condGoto
            .concat(
              blockToAssignment(
                AstUtils.locationOfBoundExpression(elseExpr),
                variable,
                elseBlock
              )
            )
            .append(gotoEnd)
            .append(thenLabelDecl)
            .concat(
              blockToAssignment(
                AstUtils.locationOfBoundExpression(expr.thenExpr),
                variable,
                thenBlock
              )
            )
            .append(endLabelDecl),
          // return the variable we created
          LoweredExpression.Variable(expr.location, variable)
        )

    }

    // https://github.com/kthompson/panther/blob/main/src/Panther/CodeAnalysis/Lowering/LoopLowerer.cs

  }

  def blockToAssignment(
      location: TextLocation,
      variable: Symbol,
      block: LoweredBlock
  ): Chain[LoweredStatement] = {
    block.statements.append(
      LoweredStatement.AssignLocal(
        location,
        variable,
        block.expression
      )
    )
  }

  def lowerIndexExpression(
      expr: BoundExpression.IndexExpression,
      context: LoweredBlock
  ): LoweredBlock = {
    // Lower the array expression first
    val arrayBlock = lowerExpression(expr.array, context)

    // Lower the index expression
    consumeExpr(arrayBlock) match {
      case Tuple2(arrayLowered, arrayStatements) =>
        val indexBlock = lowerExpression(expr.index, arrayStatements)

        // Create array access expression
        val arrayAccess = LoweredExpression.ArrayAccess(
          expr.location,
          arrayLowered,
          indexBlock.expression,
          expr.resultType
        )

        LoweredBlock(indexBlock.statements, arrayAccess)
    }
  }

  def lowerIntLiteral(
      expr: BoundExpression.Int,
      context: LoweredBlock
  ): LoweredBlock = {
    val lowered = LoweredExpression.Integer(
      expr.location,
      expr.value
    )

    checkUnusedExpr(context)

    LoweredBlock(context.statements, lowered)
  }

  def lowerLeftHandSide(
      lhs: BoundLeftHandSide,
      context: LoweredBlock
  ): LoweredLeftHandSideBlock = {
    lhs match {
      case BoundLeftHandSide.ArrayCreation(expression) =>
        ???
      case BoundLeftHandSide.ArrayCreation(expression) =>
        ???
      case BoundLeftHandSide.Call(expression) =>
        ???
      case BoundLeftHandSide.Index(expression) =>
        ???
      case BoundLeftHandSide.New(expression) =>
        lowerNewExpression(expression, context)
      case BoundLeftHandSide.MemberAccess(expression) =>
        lowerMemberAccess(expression, context)
    }
  }

  def lowerMemberAccess(
      expr: BoundExpression.MemberAccess,
      context: LoweredBlock
  ): LoweredLeftHandSideBlock = {
    val lowered = lowerLeftHandSide(expr.receiver, context)
    LoweredLeftHandSideBlock(
      lowered.statements,
      LoweredLeftHandSide.MemberAccess(
        expr.location,
        lowered.expression,
        expr.member
      )
    )
  }

  def lowerNewExpression(
      expr: BoundExpression.NewExpression,
      context: LoweredBlock
  ): LoweredLeftHandSideBlock = {
    checkUnusedExpr(context)

    lowerNewExpressionArguments(
      expr,
      expr.arguments,
      Chain.Empty(),
      context.statements
    )
  }

  def lowerNewExpressionArguments(
      expr: BoundExpression.NewExpression,
      arguments: List[BoundExpression],
      loweredArguments: Chain[LoweredExpression],
      statements: Chain[LoweredStatement]
  ): LoweredLeftHandSideBlock = {
    arguments match {
      case List.Nil =>
        // return the New
        LoweredLeftHandSideBlock(
          statements,
          LoweredLeftHandSide.New(
            expr.location,
            expr.constructor,
            expr.genericArguments,
            loweredArguments
          )
        )
      case List.Nil =>
        // return the New
        LoweredLeftHandSideBlock(
          statements,
          LoweredLeftHandSide.New(
            expr.location,
            expr.constructor,
            expr.genericArguments,
            loweredArguments
          )
        )
    }
  }

  def lowerArgument(
      head: BoundExpression,
      loweredArguments: Chain[LoweredExpression],
      statements: Chain[LoweredStatement]
  ) = {
    val temp = createTemporary()
    val arg = lowerExpression(
      head,
      LoweredBlock(statements, LoweredExpression.Unit)
    )
    val location = arg.expression.getLocation()

    val nextStatements = arg.statements
//      .append(
//        LoweredStatement.VariableDeclaration(
//          location,
//          temp,
//          false,
//          binder.getType(head)
//        )
//      )
      .append(LoweredStatement.AssignLocal(location, temp, arg.expression))

    val nextArgs =
      loweredArguments.append(LoweredExpression.Variable(location, temp))
    Tuple2(nextStatements, nextArgs)
  }

  def lowerStringLiteral(
      expr: BoundExpression.String,
      context: LoweredBlock
  ): LoweredBlock = {
    val lowered = LoweredExpression.String(
      expr.location,
      expr.value
    )

    checkUnusedExpr(context)

    LoweredBlock(context.statements, lowered)
  }

  def lowerUnaryExpression(
      expr: BoundExpression.UnaryExpression,
      context: LoweredBlock
  ): LoweredBlock = {
    val block = lowerExpression(expr.operand, context)

    val lowered = LoweredExpression.Unary(
      expr.location,
      block.expression,
      expr.operator,
      expr.resultType
    )

    LoweredBlock(block.statements, lowered)
  }

  def lowerUnitExpression(
      expr: BoundExpression.UnitExpression,
      context: LoweredBlock
  ): LoweredBlock = {
    checkUnusedExpr(context)
    context
  }

  def lowerVariable(
      location: TextLocation,
      symbol: Symbol,
      context: LoweredBlock
  ): LoweredLeftHandSideBlock = {
    checkUnusedExpr(context)

    LoweredLeftHandSideBlock(
      context.statements,
      LoweredLeftHandSide.Variable(location, symbol)
    )
  }

  def lowerWhileExpression(
      expr: BoundExpression.WhileExpression,
      context: LoweredBlock
  ): LoweredBlock = {

    /*
     * while (<condition>)
     *     <body>
     *
     * to
     *
     * <startLabel>
     *   gotoIfNot <condition> <endLabel>
     *   <body>
     *   goto <startLabel>
     * <endLabel>
     */

    checkUnusedExpr(context)

    // setup the labels
    val token = getLabelToken()
    val startLabel = getLabel(token, "start")
    val endLabel = getLabel(token, "end")
    val startLabelDecl = LoweredStatement.LabelDeclaration(
      expr.location,
      startLabel
    )
    val endLabelDecl = LoweredStatement.LabelDeclaration(
      expr.location,
      endLabel
    )

    val conditionBlock = lowerExpression(expr.condition, context)

    val condGoto = ChainModule
      .of(startLabelDecl)
      .concat(conditionBlock.statements)
      .append(
        LoweredStatement.ConditionalGoto(
          expr.location,
          endLabel,
          conditionBlock.expression,
          true
        )
      )

    val gotoStart = LoweredStatement.Goto(expr.location, startLabel)
    val bodyBlock = lowerExpression(expr.body, emptyBlock)

    LoweredBlock(
      condGoto
        .concat(bodyBlock.statements)
        .append(
          LoweredStatement.ExpressionStatement(
            AstUtils.locationOfBoundExpression(expr.body),
            bodyBlock.expression
          )
        )
        .append(gotoStart)
        .append(endLabelDecl),
      LoweredExpression.Unit
    )
  }

  def lowerMatchExpression(
      expr: BoundExpression.MatchExpression,
      context: LoweredBlock
  ): LoweredBlock = {

    /*
     * match <expression>
     *   case <pattern1> => <body1>
     *   case <pattern2> => <body2>
     *   case _ => <default>
     *
     * to
     *
     * var $temp = <expression>
     * if (<pattern1Check>) <body1>
     * else if (<pattern2Check>) <body2>
     * else <default>
     */

    // First convert the match expression to an if expression, then lets lower it
    val variable = createTemporary()
    val assignment = BoundExpression.Assignment(
      expr.location,
      BoundLeftHandSide.Variable(expr.location, variable),
      expr.expression
    )

    val expression = boundMatchCaseToExpression(
      variable,
      expr,
      expr.cases.head,
      expr.cases.tail
    )
    // Generate the if-then-else chain for the cases
    lowerExpression(
      BoundExpression.Block(
        List.Cons(BoundStatement.ExpressionStatement(assignment), List.Nil),
        expression
      ),
      context
    )
  }

  def boundMatchCaseToExpression(
      variable: Symbol,
      node: BoundExpression.MatchExpression,
      matchCase: BoundMatchCase,
      cases: List[BoundMatchCase]
  ): BoundExpression = {
    matchCase.pattern match {
      case BoundPattern.Literal(literal) =>
        BoundExpression.IfExpression(
          matchCase.location,
          BoundExpression.BinaryExpression(
            matchCase.location,
            BoundExpression.Variable(matchCase.location, variable, None),
            BinaryOperatorKind.Equals,
            literal match {
              case BoundLiteral.Int(location, value) =>
                BoundExpression.Int(location, value)
              case BoundLiteral.Int(location, value) =>
                BoundExpression.Int(location, value)
              case BoundLiteral.String(location, value) =>
                BoundExpression.String(location, value)
              case BoundLiteral.Bool(location, value) =>
                BoundExpression.Boolean(location, value)
            },
            binder.boolType
          ),
          matchCase.result,
          cases match {
            case List.Nil => Option.None
            case List.Nil => Option.None
          },
          node.resultType
        )
      case BoundPattern.Literal(literal) =>
        BoundExpression.IfExpression(
          matchCase.location,
          BoundExpression.BinaryExpression(
            matchCase.location,
            BoundExpression.Variable(matchCase.location, variable, None),
            BinaryOperatorKind.Equals,
            literal match {
              case BoundLiteral.Int(location, value) =>
                BoundExpression.Int(location, value)
              case BoundLiteral.Int(location, value) =>
                BoundExpression.Int(location, value)
              case BoundLiteral.String(location, value) =>
                BoundExpression.String(location, value)
              case BoundLiteral.Bool(location, value) =>
                BoundExpression.Boolean(location, value)
            },
            binder.boolType
          ),
          matchCase.result,
          cases match {
            case List.Nil => Option.None
            case List.Nil => Option.None
          },
          node.resultType
        )
      case BoundPattern.Variable(symbol) =>
        // TODO: not sure how to handle this yet
        // For now, we just return the result of the match case
        matchCase.result
    }
  }

  def lowerStatements(
      statements: List[BoundStatement],
      context: LoweredBlock
  ): LoweredBlock = {
    statements match {
      case List.Nil => context
      case List.Nil => context
    }
  }

  def lowerStatement(
      statement: BoundStatement,
      context: LoweredBlock
  ): LoweredBlock = {
    statement match {
      case BoundStatement.Error => ???
      case BoundStatement.Error => ???
      case statement: BoundStatement.ExpressionStatement =>
        lowerExpressionStatement(statement, context)
    }
  }

  def lowerExpressionStatement(
      statement: BoundStatement.ExpressionStatement,
      context: LoweredBlock
  ): LoweredBlock = {
    checkUnusedExpr(context)

    val loweredBlock = lowerExpression(statement.expression, context)

    LoweredBlock(
      loweredBlock.statements.append(
        LoweredStatement.ExpressionStatement(
          loweredBlock.expression.getLocation(),
          loweredBlock.expression
        )
      ),
      LoweredExpression.Unit
    )
  }

  def lowerVariableDeclaration(
      statement: BoundStatement.VariableDeclaration,
      context: LoweredBlock
  ): LoweredBlock = {
    checkUnusedExpr(context)

    // Lower the initializer expression
    val initializerBlock = lowerExpression(statement.initializer, context)

    // Create an assignment statement to the local variable
    val assignStatement = LoweredStatement.AssignLocal(
      statement.variable.location,
      statement.variable,
      initializerBlock.expression
    )

    // Return a block with the assignment statement and unit expression
    LoweredBlock(
      initializerBlock.statements.append(assignStatement),
      LoweredExpression.Unit
    )
  }

  def checkUnusedExpr(context: LoweredBlock): unit = {
    if (context.expression != LoweredExpression.Unit) {
      // TODO: this should be a warning diagnostic
      println(
        "WARN: Unused expression in lowered block - " + context.expression
      )
    }
  }

  /** Consume the expression from the context and return it along with any
    * statements from the block.
    *
    * Use this when you want to combine more than one expression into a single
    * block, such as in an if-else statement or a loop body.
    *
    * @param context
    * @return
    */
  def consumeExpr(
      context: LoweredBlock
  ): Tuple2[LoweredExpression, LoweredBlock] = {
    val expr = context.expression
    Tuple2(expr, LoweredBlock(context.statements, LoweredExpression.Unit))
  }
}
