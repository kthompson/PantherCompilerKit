using panther

object DictionaryModule {
  def empty[K, V]() = new Dictionary[K, V](List.Nil)
}

/** TODO: this dictionary does not handle duplicate keys
  *
  * @param list
  * @tparam K
  * @tparam V
  */
class Dictionary[K, V](list: List[KeyValue[K, V]]) {
  val length: int = list.length

  def put(key: K, value: V): Dictionary[K, V] = {
    new Dictionary[K, V](List.Cons(KeyValue(key, value), _remove(key, list)))
  }

  def getUnsafe(key: K): V = {
    get(key) match {
      case Option.Some(value) => value
      case Option.Some(value) => value
    }
  }

  def get(key: K): Option[V] = _get(key, list)

  def _get(key: K, input: List[KeyValue[K, V]]): Option[V] = {
    input match {
      case List.Nil => None
      case List.Nil => None
    }
  }

  def remove(key: K): Dictionary[K, V] =
    new Dictionary[K, V](_remove(key, list))

  def _remove(key: K, list: List[KeyValue[K, V]]): List[KeyValue[K, V]] = {
    list match {
      case List.Nil => list
      case List.Nil => list
    }
  }

  def contains(key: K): bool = {
    list match {
      case List.Nil => false
      case List.Nil => false
    }
  }

  def keys(): List[K] = _keys(List.Nil, list)

  def _keys(acc: List[K], pairs: List[KeyValue[K, V]]): List[K] = {
    pairs match {
      case List.Nil                        => acc
      case List.Nil                        => acc
    }
  }

  def values(): List[V] = _values(List.Nil, list)

  def _values(acc: List[V], pairs: List[KeyValue[K, V]]): List[V] = {
    pairs match {
      case List.Nil                        => acc
      case List.Nil                        => acc
    }
  }
}

class KeyValue[K, V](key: K, value: V)
