using scala.Array as SArray

enum Type {
  case Function(parameters: SArray<TypedParameter>, returnType: Type)
  case Array(inner: Type)
  case Reference(symbol: Symbol)
  case Option(inner: Type)
  case Any
  case bool
  case Char
  case int
  case Never
  case string
  case unit
  
  case Error
}

enum TypedUnaryOperator {
  case Negate
  case Not
}

enum TypedBinaryOperator {
  case Add
  case And
  case Divide
  case Equal
  case Greater
  case GreaterOrEqual
  case Less
  case LessOrEqual
  case Multiply
  case NotEqual
  case Or
  case Subtract
}

enum TypedExpression {
  case TypedLiteral(typ: Type, value: string)
  case TypedVariable(typ: Type, name: string)
  case TypedAssignment(name: string, value: TypedExpression)
  case TypedBinary(typ: Type, left: TypedExpression, op: TypedBinaryOperator, right: TypedExpression)
  case TypedCall(typ: Type, callee: TypedExpression, args: List<TypedExpression>)
  case TypedIf(typ: Type, condition: TypedExpression, thenBranch: TypedExpression, elseBranch: TypedExpression)
  case TypedIndex(typ: Type, array: TypedExpression, index: TypedExpression)
  case TypedBlock(typ: Type, statements: List<TypedExpression>)
  case TypedUnary(typ: Type, op: TypedUnaryOperator, operand: TypedExpression)
}

class TypedParameter(name: string, typ: Type)

enum TypedMember {
  case TypedField(name: string, typeStr: Type)
  case TypedMethod(name: string, returnType: Type, args: List<TypedParameter>)
}

enum TypedDefinition {
  case TypedClass(namespace: string, name: string, members: List<TypedMember>)
  case TypedEnum(namespace: string, name: string, members: List<string>)
}

class TypedAssembly(classes: List<TypedDefinition>)
