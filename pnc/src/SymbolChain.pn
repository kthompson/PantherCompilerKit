using panther

object SymbolChain {

  def fromOne(symbol: Symbol): Chain<Symbol> = {
    if (symbol.kind == SymbolKind.Block) {
      fromList(symbol.members())
    } else {
      ChainModule.concat(Chain.Singleton(symbol), fromList(symbol.members()))
    }
  }

  def fromList(symbols: List<Symbol>): Chain<Symbol> = {
    symbols match {
      case List.Nil => Chain.Empty
      case List.Cons(head, tail) =>
        ChainModule.concat(fromOne(head), fromList(tail))
    }
  }
}
