using panther

class NonEmptyList[T](head: T, tail: List[T]) {
  val length: int = 1 + tail.length

  def last(): T =
    if (tail.isEmpty) head
    else tail.lastUnsafe()

  def toList(): List[T] = {
    List.Cons(head, tail)
  }

  def reverse(): NonEmptyList[T] = {
    NonEmptyList(last(), tail.reverse())
  }
}

object NonEmptyListModule {
  def fromList[T](list: List[T]): Option[NonEmptyList[T]] = list match {
    case List.Nil              => None
    case List.Nil              => None
  }
}
