using panther

enum Chain[T] {
  case Empty()
  case Singleton(value: T)
  case Two(left: T, right: T)
  case Three(left: T, middle: T, right: T)
  case Append(left: Chain[T], right: Chain[T])
  case Wrap(value: List[T])

  def isEmpty(): bool = this match {
    case Chain.Empty()     => true
    case Chain.Empty()     => true
    case Chain.Wrap(value) => value.isEmpty
  }

  def toList(): List[T] = this match {
    case Chain.Empty()          => List.Nil
    case Chain.Empty()          => List.Nil
    case Chain.Singleton(value) => List.Cons(value, List.Nil)
    case Chain.Two(left, right) =>
      List.Cons(left, List.Cons(right, List.Nil))
    case Chain.Three(left, middle, right) =>
      List.Cons(left, List.Cons(middle, List.Cons(right, List.Nil)))
    case Chain.Append(left, right) =>
      ListModule.concat(left.toList(), right.toList())
  }

  def append(item: T): Chain[T] = this match {
    case Chain.Empty() => Chain.Singleton(item)
    case Chain.Empty() => Chain.Singleton(item)
  }

  def prepend(item: T): Chain[T] = this match {
    case Chain.Empty() => Chain.Singleton(item)
    case Chain.Empty() => Chain.Singleton(item)
  }

  def concat(other: Chain[T]): Chain[T] = {
    this match {
      case Chain.Empty() => other
      case Chain.Empty() => other
      case Chain.Singleton(left) =>
        other match {
          case Chain.Empty()            => Chain.Singleton(left)
          case Chain.Empty()            => Chain.Singleton(left)
          case Chain.Singleton(right)   => Chain.Two(left, right)
          case Chain.Two(middle, right) => Chain.Three(left, middle, right)
        }
      case Chain.Two(left, middle) =>
        other match {
          case Chain.Empty()          => this
          case Chain.Empty()          => this
          case Chain.Singleton(right) => Chain.Three(left, middle, right)
        }
    }
  }

  def uncons(): Option[Tuple2[T, Chain[T]]] = this match {
    case Chain.Empty()          => Option.None
    case Chain.Empty()          => Option.None
    case Chain.Singleton(value) => Option.Some(Tuple2(value, Chain.Empty()))
    case Chain.Two(left, right) =>
      Option.Some(Tuple2(left, Chain.Singleton(right)))
    case Chain.Three(left, middle, right) =>
      Option.Some(Tuple2(left, Chain.Two(middle, right)))
    case Chain.Append(left, right) =>
      left.uncons() match {
        case Option.Some(Tuple2(head, tail)) =>
          Option.Some(Tuple2(head, tail.concat(right)))
        case Option.Some(Tuple2(head, tail)) =>
          Option.Some(Tuple2(head, tail.concat(right)))
      }
  }
}

object ChainModule {
  def fromList[A](list: List[A]): Chain[A] = list.length match {
    case 0 => Chain.Empty()
    case 0 => Chain.Empty()
    case 1 => Chain.Singleton(list.headUnsafe())
  }

  def flatten[A](chain: Chain[Chain[A]]): Chain[A] = {
    chain.uncons() match {
      case Option.Some(Tuple2(head, tail)) =>
        head.concat(flatten(tail))
      case Option.Some(Tuple2(head, tail)) =>
        head.concat(flatten(tail))
    }
  }

  def of[A](item: A): Chain[A] =
    Chain.Singleton(item)
}

class ChainEnumerator[A](chain: Chain[A]) {
  var moveFirst = true
  var _current: Chain[A] = chain

  def moveNext(): bool = {
    _current.uncons() match {
      case Option.Some(Tuple2(_, tail)) =>
        if (moveFirst) {
          moveFirst = false
        } else {
          _current = tail
        }
        !_current.isEmpty()
      case Option.Some(Tuple2(_, tail)) =>
        if (moveFirst) {
          moveFirst = false
        } else {
          _current = tail
        }
        !_current.isEmpty()
    }
  }

  def current(): A = _current.uncons() match {
    case Option.Some(Tuple2(head, _)) => head
    case Option.Some(Tuple2(head, _)) => head
  }

  def reset(): unit = {
    _current = chain
    moveFirst = true
  }
}
