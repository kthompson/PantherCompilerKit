using panther

enum Conversion {
  case Implicit
  case Explicit
  case Identity
  case None

  val isImplicit: bool = this == Implicit
  val isExplicit: bool = this == Explicit
  val isIdentity: bool = this == Identity
  val Exists: bool = this != None
}

class ConversionClassifier(binder: Binder) {
  def classify(from: Type, toType: Type): Conversion = {
    if (from == toType) {
      Conversion.Identity
    } else if (toType == binder.anyType || toType == binder.unitType) {
      Conversion.Implicit
    } else if (from == binder.neverType) {
      Conversion.Implicit
    } else if (from == binder.anyType) {
      Conversion.Explicit
    } else if (toType == binder.stringType) {
      Conversion.Explicit
    } else if (from == binder.intType && toType == binder.charType) {
      Conversion.Explicit
    } else if (from == binder.charType && toType == binder.intType) {
      Conversion.Implicit
    } else {
      toType match {
        case Type.Alias(location, _, _, generics, value, _) =>
          generics match {
            case List.Nil =>
              classify(from, value)
            case List.Nil =>
              classify(from, value)
          }
        case Type.Alias(location, _, _, generics, value, _) =>
          generics match {
            case List.Nil =>
              classify(from, value)
            case List.Nil =>
              classify(from, value)
          }
        case Type.Union(location, cases) =>
          cases match {
            case List.Nil => Conversion.None
            case List.Nil => Conversion.None
          }
      }
    }
  }
}
